(function() {
  var breezeDataModule = angular
  .module('breezeDataModule',
    [
    'breeze.angular',
    'notificationsContextModule',
    'entriesContextModule',
    'profileModule',
    'journalModule',
    'commentsModule',
    'UserModel',
    'lessonModel',
    'lessonModule',
    'lessonSummaryModule',
    'lessonMapModule',
    'commentsModel',
    'moduleModel',
    'setModel',
    'pageModel',
    'questionsModel'
  ])
  .config(['breezeProvider', function(breezeProvider) {
    // Convert server-side PascalCase to client-side camelCase property names - note, this doesn't work in my use case
    //breezeProvider.NamingConvention.camelCase.setAsDefault();
    //// configure to use the model library for Angular
    //breezeProvider.initializeAdapterInstance("modelLibrary", "backingStore", true);
  }])
  .factory('breezeService', ['breeze', function (breeze, $q) {
    var keyGen = breeze.AutoGeneratedKeyType.Identity;
    var namespace = 'CC.Model';
    var helper = new breeze.config.MetadataHelper(namespace, keyGen);
    var store;
    
    var DT = breeze.DataType;
    var BOOL = DT.Boolean;
    var DATE = DT.DateTime;
    var ID = DT.Int32;
      
    var service = {
      getMembers: getUsers,
      filterPages: filterPages
    };

    //////////////////////////////////


    function createManager(){
      
      // create a new manager talking to our api 
      var ds = new breeze.DataService({
          serviceName: "http://localhost/duke-quest/public/api",
          hasServerMetadata: false 
      });
      var manager = new breeze.EntityManager({dataService: ds});

      var addType = function (store, type) { helper.addTypeToStore(store, type); };
      console.log(schema);
      angular.forEach(schema, function(entity_type){
        addType(manager.metadataStore, entity_type);
      });

      return manager;
    }
     

    function getUsers(){
      return breeze.EntityQuery
        .from('page')
        .toType('page')
        .using(manager)
        .execute().then(success).catch(failed);
    }

    function filterPages(){
      var predicate = new breeze.Predicate("set_id", "==", 1);
      var query = breeze.EntityQuery
        .from('page')
        .toType('page')
        .where(predicate)
        .orderBy("created_at");
        console.log(manager);
      return manager.executeQueryLocally(query);
    }

    function success(data) {
      console.log(data);
        console.log(data.results);
        var thisIsaDemo = true;
        
        if (thisIsaDemo){
          console.log("Retrieved " + data.results.length + " pages.");
          
          // demonstrate that these query results are also entities in cache
          var cachedMembers = manager.getEntities('page');
          console.log("There are "+cachedMembers.length + " pages in cache"); 
          return cachedMembers; // return the cached entities

        } else {
          // return the query results directly
          return data.results;
        }
    }

    function failed(error) {
      console.log("Angular team member query failed: " + error.message);
      return $q.reject(error.message);
    }   

    // hard code our metadata
    var schema = [
      { 
        name: 'user',
        dataProperties: {
          id:          { type: ID },
          tutor:       { type: BOOL },
          fname:       { max: 50 },
          lname:       { max: 50 },
          email:       { max: 400 },
          company:     { max: 400 },
          role:        { max: 400 },
          phone:       { max: 15 },
          education:   { max: 400 },
          strengths:   { max: 400 },
          interests:   { max: 400 },
          upload_url:  { max: 400 },
          created_at:  { type: DATE }
        },
        navigationProperties: {
          useranswers: { type: 'useranswer', hasMany: true },
        },
      },

      { 
        name: 'useranswer',
        dataProperties: {
          id:          { type: ID },
          user_id:     { type: ID },
          option_id:   { max: 50, nullOk: false },
          value:       { max: 1000 },
          created_at:  { type: DATE }
        },
        navigationProperties: {
          user:        { type: 'user' },
          options:     { type: 'option' }
        },
      },

      { 
        name: 'option',
        dataProperties: {
          id:          { type: ID },
          page_id:     { type: ID },
          target_id:   { type: ID },
          name:        { max: 50 },
          order:       { },
          created_at:  { type: DATE }
        },
        navigationProperties: {
          useranswers: { type: 'user', hasMany: true },
          page:        { type: 'page' }
        },
      },

      { 
        name: 'target',
        dataProperties: {
          id:          { type: ID },
          page_id:     { type: ID },
          name:        { max: 50 },
          order:       { },
          created_at:  { type: DATE }
        },
        navigationProperties: {
          options: { type: 'option', hasMany: true },
          page:    { type: 'page' }
        },
      },

      { 
        name: 'page',
        dataProperties: {
          id:          { type: ID },
          set_id:      { type: ID },
          name:        { max: 300 },
          body:        { },
          order:       { },
          type:        { },
          created_at:  { type: DATE }
        },
        navigationProperties: {
          options: { type: 'option', hasMany: true },
          set:     { type: 'set' }
        },
      },

      { 
        name: 'set',
        dataProperties: {
          id:          { type: ID },
          module_id:   { type: ID },
          body:        { },
          order:       { },
          created_at:  { type: DATE }
        },
        navigationProperties: {
          pages:       { type: 'page', hasMany: true },
          module:         { type: 'module' }
        },
      },

      { 
        name: 'module',
        dataProperties: {
          id:          { type: ID },
          lesson_id:   { type: ID },
          body:        { },
          order:       { },
          created_at:  { type: DATE }
        },
        navigationProperties: {
          sets:       { type: 'set', hasMany: true },
          lesson:         { type: 'module' }
        },
      },

      { 
        name: 'lesson',
        dataProperties: {
          id:          { type: ID },
          body:        { },
          order:       { },
          created_at:  { type: DATE }
        },
        navigationProperties: {
          modules:       { type: 'module', hasMany: true },
        },
      }
    ];
    
    var manager = createManager();
    return service;
  }]);

})();